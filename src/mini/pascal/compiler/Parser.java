
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 27 19:10:30 CST 2017
//----------------------------------------------------

package mini.pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import mini.pascal.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 27 19:10:30 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\006\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\011\010\000\002\012\006\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\015\003" +
    "\000\002\015\005\000\002\016\006\000\002\016\010\000" +
    "\002\016\006\000\002\016\006\000\002\016\012\000\002" +
    "\016\005\000\002\016\005\000\002\017\006\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\002\000\002\021\003\000\002" +
    "\021\005\000\002\022\004\000\002\022\004\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\023\003\000\002\023\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\024\003\000\002\024\005\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\004\005\001\002\000\004\002\154\001" +
    "\002\000\004\056\006\001\002\000\004\034\007\001\002" +
    "\000\020\005\ufffd\014\ufffd\021\010\022\ufffd\023\ufffd\025" +
    "\ufffd\056\ufffd\001\002\000\004\056\022\001\002\000\016" +
    "\005\024\014\020\022\015\023\014\025\016\056\022\001" +
    "\002\000\004\037\013\001\002\000\004\002\000\001\002" +
    "\000\016\005\024\014\020\022\015\023\014\025\016\056" +
    "\022\001\002\000\014\015\042\027\036\041\037\042\032" +
    "\056\022\001\002\000\004\056\105\001\002\000\004\040" +
    "\103\001\002\000\014\015\042\027\036\041\037\042\032" +
    "\056\022\001\002\000\006\034\026\037\uffff\001\002\000" +
    "\074\006\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\031\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\056\uffe5\001\002\000\010\006\uffef" +
    "\034\uffef\037\uffef\001\002\000\016\005\024\014\020\022" +
    "\015\023\014\025\016\056\022\001\002\000\006\006\027" +
    "\034\026\001\002\000\016\005\024\014\020\022\015\023" +
    "\014\025\016\056\022\001\002\000\014\006\uffe7\013\uffe7" +
    "\024\uffe7\034\uffe7\037\uffe7\001\002\000\010\006\uffee\034" +
    "\uffee\037\uffee\001\002\000\014\015\042\027\036\041\037" +
    "\042\032\056\022\001\002\000\010\015\042\027\036\056" +
    "\022\001\002\000\060\006\uffdc\012\uffdc\013\uffdc\015\uffdd" +
    "\017\070\020\uffdc\024\uffdc\026\uffdc\027\uffdd\030\uffdc\032" +
    "\uffdc\033\060\034\uffdc\037\uffdc\041\062\042\056\043\057" +
    "\044\063\051\066\052\061\053\065\054\064\056\uffdd\001" +
    "\002\000\060\006\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8\001\002\000" +
    "\064\006\uffce\011\uffce\012\uffce\013\uffce\015\uffce\017\uffce" +
    "\020\uffce\024\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\046\uffce\051\uffce\052\uffce\053\uffce\054\uffce\056\uffce\001" +
    "\002\000\014\015\042\027\036\041\037\042\032\056\022" +
    "\001\002\000\010\015\042\027\036\056\022\001\002\000" +
    "\004\032\052\001\002\000\064\006\uffd4\011\050\012\uffd4" +
    "\013\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\037\uffd4\041\uffd4" +
    "\042\uffd4\043\047\044\045\046\044\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\001\002\000\010\015\042\027\036" +
    "\056\022\001\002\000\064\006\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\015\uffcc\017\uffcc\020\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\034\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\056\uffcc\001\002\000\010\015\uffcf\027\uffcf\056" +
    "\uffcf\001\002\000\010\015\uffd2\027\uffd2\056\uffd2\001\002" +
    "\000\010\015\042\027\036\056\022\001\002\000\010\015" +
    "\uffd1\027\uffd1\056\uffd1\001\002\000\010\015\uffd0\027\uffd0" +
    "\056\uffd0\001\002\000\060\006\uffd3\012\uffd3\013\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\037\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3" +
    "\001\002\000\072\006\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\056\uffe6\001\002\000\060\006" +
    "\uffda\012\uffda\013\uffda\015\uffda\017\uffda\020\uffda\024\uffda" +
    "\026\uffda\027\uffda\030\uffda\032\uffda\033\uffda\034\uffda\037" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\051\uffda\052\uffda" +
    "\053\uffda\054\uffda\056\uffda\001\002\000\004\030\055\001" +
    "\002\000\064\006\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\046\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056" +
    "\uffcd\001\002\000\010\015\042\027\036\056\022\001\002" +
    "\000\014\015\uffe3\027\uffe3\041\uffe3\042\uffe3\056\uffe3\001" +
    "\002\000\014\015\uffde\027\uffde\041\uffde\042\uffde\056\uffde" +
    "\001\002\000\014\015\uffe1\027\uffe1\041\uffe1\042\uffe1\056" +
    "\uffe1\001\002\000\010\015\042\027\036\056\022\001\002" +
    "\000\014\015\uffe4\027\uffe4\041\uffe4\042\uffe4\056\uffe4\001" +
    "\002\000\014\015\uffdf\027\uffdf\041\uffdf\042\uffdf\056\uffdf" +
    "\001\002\000\014\015\uffe0\027\uffe0\041\uffe0\042\uffe0\056" +
    "\uffe0\001\002\000\014\015\uffe2\027\uffe2\041\uffe2\042\uffe2" +
    "\056\uffe2\001\002\000\014\015\042\027\036\041\037\042" +
    "\032\056\022\001\002\000\010\015\042\027\036\056\022" +
    "\001\002\000\060\006\uffd5\012\uffd5\013\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\001\002" +
    "\000\034\006\uffdb\012\uffdb\013\uffdb\017\070\020\uffdb\024" +
    "\uffdb\026\uffdb\030\uffdb\032\uffdb\034\uffdb\037\uffdb\041\062" +
    "\042\056\001\002\000\060\006\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\037\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\056\uffd7" +
    "\001\002\000\060\006\uffd6\012\uffd6\013\uffd6\015\uffd6\017" +
    "\uffd6\020\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002" +
    "\000\060\006\uffd9\012\uffd9\013\uffd9\015\uffd9\017\uffd9\020" +
    "\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\056\uffd9\001\002\000\004" +
    "\020\077\001\002\000\016\005\024\014\020\022\015\023" +
    "\014\025\016\056\022\001\002\000\014\006\uffed\013\101" +
    "\024\uffed\034\uffed\037\uffed\001\002\000\016\005\024\014" +
    "\020\022\015\023\014\025\016\056\022\001\002\000\014" +
    "\006\uffec\013\uffec\024\uffec\034\uffec\037\uffec\001\002\000" +
    "\014\015\042\027\036\041\037\042\032\056\022\001\002" +
    "\000\014\006\uffe8\013\uffe8\024\uffe8\034\uffe8\037\uffe8\001" +
    "\002\000\004\040\106\001\002\000\014\015\042\027\036" +
    "\041\037\042\032\056\022\001\002\000\004\026\110\001" +
    "\002\000\014\015\042\027\036\041\037\042\032\056\022" +
    "\001\002\000\004\012\112\001\002\000\016\005\024\014" +
    "\020\022\015\023\014\025\016\056\022\001\002\000\014" +
    "\006\uffe9\013\uffe9\024\uffe9\034\uffe9\037\uffe9\001\002\000" +
    "\004\012\115\001\002\000\016\005\024\014\020\022\015" +
    "\023\014\025\016\056\022\001\002\000\014\006\uffeb\013" +
    "\uffeb\024\uffeb\034\uffeb\037\uffeb\001\002\000\004\024\120" +
    "\001\002\000\014\015\042\027\036\041\037\042\032\056" +
    "\022\001\002\000\014\006\uffea\013\uffea\024\uffea\034\uffea" +
    "\037\uffea\001\002\000\016\005\ufffe\014\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\056\022\001\002\000\006\035\ufff9\036\ufff9" +
    "\001\002\000\016\005\ufffc\014\ufffc\022\ufffc\023\ufffc\025" +
    "\ufffc\056\ufffc\001\002\000\006\035\127\036\126\001\002" +
    "\000\004\056\152\001\002\000\014\010\137\055\130\057" +
    "\131\060\135\064\134\001\002\000\004\034\ufff1\001\002" +
    "\000\004\034\ufff3\001\002\000\004\034\151\001\002\000" +
    "\004\034\ufff7\001\002\000\004\034\ufff0\001\002\000\004" +
    "\034\ufff2\001\002\000\004\034\ufff6\001\002\000\004\031" +
    "\140\001\002\000\004\055\141\001\002\000\004\037\146" +
    "\001\002\000\004\032\143\001\002\000\004\016\144\001" +
    "\002\000\012\055\130\057\131\060\135\064\134\001\002" +
    "\000\004\034\ufff5\001\002\000\004\037\147\001\002\000" +
    "\004\055\150\001\002\000\004\032\ufff4\001\002\000\016" +
    "\005\ufffa\014\ufffa\022\ufffa\023\ufffa\025\ufffa\056\ufffa\001" +
    "\002\000\006\035\ufff8\036\ufff8\001\002\000\016\005\ufffb" +
    "\014\ufffb\022\ufffb\023\ufffb\025\ufffb\056\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\012\005\121\006\123\007\124\017\122\001" +
    "\001\000\010\015\020\016\022\017\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\116\017\016\001" +
    "\001\000\014\017\034\021\113\022\032\023\033\024\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\034\021\075\022\032\023\033\024\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\024\016\022\017\016\001\001\000\002\001\001\000\006" +
    "\016\027\017\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\034\021\037\022\032\023\033\024\040" +
    "\001\001\000\010\017\034\023\074\024\040\001\001\000" +
    "\004\020\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\034\021\053\022\032\023\033\024\040\001" +
    "\001\000\010\017\034\023\052\024\040\001\001\000\002" +
    "\001\001\000\004\025\045\001\001\000\006\017\034\024" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\034\023\050\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\034\023\073\024\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\034\023\072\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\034\022\071\023\033\024\040\001\001\000\010\017\034" +
    "\023\070\024\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\077\017\016\001\001\000" +
    "\002\001\001\000\006\016\101\017\016\001\001\000\002" +
    "\001\001\000\014\017\034\021\103\022\032\023\033\024" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\034\021\106\022\032\023\033\024\040\001\001\000" +
    "\002\001\001\000\014\017\034\021\110\022\032\023\033" +
    "\024\040\001\001\000\002\001\001\000\006\016\112\017" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\115\017\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\034\021\120\022\032\023\033\024\040" +
    "\001\001\000\002\001\001\000\010\006\152\007\124\017" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\131\011\135\013" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token.value, cur_token);
	}

	public static void main(String[] args){
		try {
			Parser asin = new Parser(
				new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(f);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= LEFT_PAR expression RIGHT_PAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Factor r = new Factor(e);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(v);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termOps ::= MOD 
            {
              Object RESULT =null;
		
			RESULT = "mod";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termOps ::= DIV 
            {
              Object RESULT =null;
		
			RESULT = "div";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termOps ::= DIVIDE 
            {
              Object RESULT =null;
		
			RESULT = "/";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termOps ::= PRODUCT 
            {
              Object RESULT =null;
		
			RESULT = "*";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= factor termOps term 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f,to,t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simpleExpression ::= simpleExpression OR term 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "OR", t);
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simpleExpression ::= simpleExpression MINUS term 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "-", t);
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simpleExpression ::= simpleExpression PLUS term 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "+", t);
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simpleExpression ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simpleExpression ::= MINUS term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simpleExpression ::= PLUS term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simpleExpression operational simpleExpression 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se1, o, se2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= simpleExpression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operational ::= 
            {
              Object RESULT =null;
		
			RESULT = null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operational ::= IN 
            {
              Object RESULT =null;
		
			Operational r = new Operational("IN");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operational ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
			Operational r = new Operational(">=");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operational ::= GREATER_EQUALS 
            {
              Object RESULT =null;
		
			Operational r = new Operational(">=");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operational ::= LESS_THAN 
            {
              Object RESULT =null;
		
			Operational r = new Operational("<");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operational ::= GREATER_THAN 
            {
              Object RESULT =null;
		
			Operational r = new Operational(">");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operational ::= DIVIDE 
            {
              Object RESULT =null;
		
			Operational r = new Operational("/");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operational ::= PRODUCT 
            {
              Object RESULT =null;
		
			Operational r = new Operational("*");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Variable r = new Variable(id);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= ID LEFT_BRACKET expression RIGHT_BRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Variable r = new Variable(id, e)
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= BEGIN statements END 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			BEStatement r = new BEStatement(s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= variable ASIGN expression 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AssignmentStatement r = new AssignmentStatement(v, e);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= FOR ID ASIGN expression TO expression DO statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ForStatement r = new ForStatement(id, e1, e2, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= REPEAT statement UNTIL expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RepeatStatement r = new RepeatStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= WHILE expression DO statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WhileStatement r = new WhileStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= IF expression THEN statement ELSE statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s1, s2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= IF expression THEN statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= statements SEMICOLON statement 
            {
              Object RESULT =null;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statement 
            {
              Object RESULT =null;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simpleType ::= BOOLEAN 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpleType ::= INTEGER 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("integer");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simpleType ::= CHAR 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("char");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simpleType ::= STRING 
            {
              SimpleType RESULT =null;
		
			SimpleType r = new SimpleType("string");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // indexRange ::= INTEGER DOT DOT INTEGER 
            {
              IndexRange RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IndexRange r = new IndexRange((Integer)start, (Integer)end);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexRange",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arrayType ::= ARRAY LEFT_BRACKET indexRange RIGHT_BRACKET OF simpleType 
            {
              ArrayType RESULT =null;
		int irleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IndexRange ir = (IndexRange)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayType r = new ArrayType(ir.start, ir.end, st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= arrayType 
            {
              Type RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(at);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			il.add_id(id);
			RESULT = il;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifierList ::= variable 
            {
              IdentifierList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IdentifierList r = new IdentifierList(v);
			r.add_id(id);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variableDeclaration ::= identifierList COLON type SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			VariableDeclaration r = new VariableDeclaration(il, t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variableDeclarationList ::= variableDeclarationList variableDeclaration 
            {
              VariableDeclarationList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			vdl.add_declaration(vd);
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variableDeclarationList ::= variableDeclaration 
            {
              VariableDeclarationList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclarationList r = new VariableDeclarationList(vd);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variableDeclarationPart ::= 
            {
              Object RESULT =null;
		
			VariableDeclarationList r = new VariableDeclarationList();
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variableDeclarationPart ::= VAR variableDeclarationList 
            {
              Object RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= variableDeclarationPart statements 
            {
              Block RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Block r = new Block((VariableDeclarationList) vdl, sp);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID SEMICOLON block DOT 
            {
              PascalProgram RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			PascalProgram r = new PascalProgram((String) id, block);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

