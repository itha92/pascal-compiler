
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 28 15:40:06 CST 2017
//----------------------------------------------------

package mini.pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import mini.pascal.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 28 15:40:06 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\006\000\002\006\004\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\010\000\002\012" +
    "\006\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\005\000" +
    "\002\015\006\000\002\015\010\000\002\015\006\000\002" +
    "\015\006\000\002\015\012\000\002\015\005\000\002\015" +
    "\005\000\002\016\006\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\002\000\002\020" +
    "\003\000\002\020\005\000\002\021\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\005\001\002\000\004\002\166\001" +
    "\002\000\004\054\006\001\002\000\004\033\007\001\002" +
    "\000\020\005\ufffd\013\ufffd\020\010\021\ufffd\022\ufffd\024" +
    "\ufffd\054\ufffd\001\002\000\006\003\134\054\132\001\002" +
    "\000\016\005\024\013\020\021\014\022\015\024\016\054" +
    "\022\001\002\000\004\036\013\001\002\000\004\002\000" +
    "\001\002\000\026\014\047\026\042\040\043\041\032\054" +
    "\022\062\034\063\037\064\044\065\035\066\041\001\002" +
    "\000\016\005\024\013\020\021\014\022\015\024\016\054" +
    "\022\001\002\000\004\054\115\001\002\000\004\037\113" +
    "\001\002\000\026\014\047\026\042\040\043\041\032\054" +
    "\022\062\034\063\037\064\044\065\035\066\041\001\002" +
    "\000\006\033\026\036\uffff\001\002\000\106\006\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\016\uffe3\017\uffe3\023\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\031\031\uffe3\032\uffe3\033" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\001\002\000\010\006\uffed\033\uffed\036\uffed\001\002\000" +
    "\016\005\024\013\020\021\014\022\015\024\016\054\022" +
    "\001\002\000\006\006\027\033\026\001\002\000\016\005" +
    "\024\013\020\021\014\022\015\024\016\054\022\001\002" +
    "\000\014\006\uffe5\012\uffe5\023\uffe5\033\uffe5\036\uffe5\001" +
    "\002\000\010\006\uffec\033\uffec\036\uffec\001\002\000\026" +
    "\014\047\026\042\040\043\041\032\054\022\062\034\063" +
    "\037\064\044\065\035\066\041\001\002\000\022\014\047" +
    "\026\042\054\022\062\034\063\037\064\044\065\035\066" +
    "\041\001\002\000\076\006\uffd8\011\uffd8\012\uffd8\014\uffd9" +
    "\016\077\017\uffd8\023\uffd8\025\uffd8\026\uffd9\027\uffd8\031" +
    "\uffd8\032\065\033\uffd8\036\uffd8\040\067\041\063\042\064" +
    "\043\070\045\075\046\073\047\074\050\066\051\071\052" +
    "\072\054\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\001\002\000\102\006\uffc7\010\uffc7\011\uffc7\012\uffc7\014" +
    "\uffc7\016\uffc7\017\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\036\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\054\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\001\002\000\102\006\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\014\uffc5\016\uffc5\017\uffc5\023\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\001\002\000\076\006\uffd4\011" +
    "\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\023\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\054\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\001\002\000\102\006\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\016\uffc4\017\uffc4\023\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000\102\006" +
    "\uffca\010\uffca\011\uffca\012\uffca\014\uffca\016\uffca\017\uffca" +
    "\023\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002" +
    "\000\102\006\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\001\002\000\026\014\047\026\042\040\043\041\032" +
    "\054\022\062\034\063\037\064\044\065\035\066\041\001" +
    "\002\000\022\014\047\026\042\054\022\062\034\063\037" +
    "\064\044\065\035\066\041\001\002\000\102\006\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\016\uffc3\017\uffc3\023\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\036" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\004" +
    "\031\057\001\002\000\102\006\uffd0\010\054\011\uffd0\012" +
    "\uffd0\014\uffd0\016\uffd0\017\uffd0\023\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\032\uffd0\033\uffd0\036\uffd0\040\uffd0\041" +
    "\uffd0\042\055\043\053\044\051\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\054\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\001\002\000\022\014\047\026\042" +
    "\054\022\062\034\063\037\064\044\065\035\066\041\001" +
    "\002\000\102\006\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\016\uffc8\017\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\054\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\022\014\uffcb\026\uffcb\054\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\022" +
    "\014\047\026\042\054\022\062\034\063\037\064\044\065" +
    "\035\066\041\001\002\000\022\014\uffce\026\uffce\054\uffce" +
    "\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000" +
    "\022\014\uffcc\026\uffcc\054\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\001\002\000\022\014\uffcd\026\uffcd\054" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\001\002" +
    "\000\076\006\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000" +
    "\104\006\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\016\uffe4" +
    "\017\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\054\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\001\002\000\076\006\uffd6\011\uffd6\012\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\036\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\054\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\001\002\000\004\027\062\001\002\000\102\006\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\036\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000" +
    "\022\014\047\026\042\054\022\062\034\063\037\064\044" +
    "\065\035\066\041\001\002\000\026\014\uffe1\026\uffe1\040" +
    "\uffe1\041\uffe1\054\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\001\002\000\026\014\uffda\026\uffda\040\uffda\041" +
    "\uffda\054\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\001\002\000\026\014\uffdf\026\uffdf\040\uffdf\041\uffdf\054" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002" +
    "\000\022\014\047\026\042\054\022\062\034\063\037\064" +
    "\044\065\035\066\041\001\002\000\026\014\uffe2\026\uffe2" +
    "\040\uffe2\041\uffe2\054\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\001\002\000\026\014\uffde\026\uffde\040\uffde" +
    "\041\uffde\054\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\001\002\000\026\014\uffdd\026\uffdd\040\uffdd\041\uffdd" +
    "\054\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\001" +
    "\002\000\026\014\uffdb\026\uffdb\040\uffdb\041\uffdb\054\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000" +
    "\026\014\uffe0\026\uffe0\040\uffe0\041\uffe0\054\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\004\045" +
    "\102\001\002\000\026\014\047\026\042\040\043\041\032" +
    "\054\022\062\034\063\037\064\044\065\035\066\041\001" +
    "\002\000\022\014\047\026\042\054\022\062\034\063\037" +
    "\064\044\065\035\066\041\001\002\000\076\006\uffd1\011" +
    "\uffd1\012\uffd1\014\uffd1\016\uffd1\017\uffd1\023\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\054\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\001\002\000\034\006\uffd7\011\uffd7" +
    "\012\uffd7\016\077\017\uffd7\023\uffd7\025\uffd7\027\uffd7\031" +
    "\uffd7\033\uffd7\036\uffd7\040\067\041\063\001\002\000\026" +
    "\014\uffdc\026\uffdc\040\uffdc\041\uffdc\054\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\076\006\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\016\uffd3\017\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\036\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\001\002\000\076\006\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\016\uffd2\017\uffd2\023\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\054\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\001\002\000\076\006\uffd5\011\uffd5" +
    "\012\uffd5\014\uffd5\016\uffd5\017\uffd5\023\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\001\002\000\004\017\107\001\002\000" +
    "\016\005\024\013\020\021\014\022\015\024\016\054\022" +
    "\001\002\000\014\006\uffeb\012\111\023\uffeb\033\uffeb\036" +
    "\uffeb\001\002\000\016\005\024\013\020\021\014\022\015" +
    "\024\016\054\022\001\002\000\014\006\uffea\012\uffea\023" +
    "\uffea\033\uffea\036\uffea\001\002\000\026\014\047\026\042" +
    "\040\043\041\032\054\022\062\034\063\037\064\044\065" +
    "\035\066\041\001\002\000\014\006\uffe6\012\uffe6\023\uffe6" +
    "\033\uffe6\036\uffe6\001\002\000\004\037\116\001\002\000" +
    "\026\014\047\026\042\040\043\041\032\054\022\062\034" +
    "\063\037\064\044\065\035\066\041\001\002\000\004\025" +
    "\120\001\002\000\026\014\047\026\042\040\043\041\032" +
    "\054\022\062\034\063\037\064\044\065\035\066\041\001" +
    "\002\000\004\011\122\001\002\000\016\005\024\013\020" +
    "\021\014\022\015\024\016\054\022\001\002\000\014\006" +
    "\uffe7\012\uffe7\023\uffe7\033\uffe7\036\uffe7\001\002\000\004" +
    "\023\125\001\002\000\026\014\047\026\042\040\043\041" +
    "\032\054\022\062\034\063\037\064\044\065\035\066\041" +
    "\001\002\000\014\006\uffe8\012\uffe8\023\uffe8\033\uffe8\036" +
    "\uffe8\001\002\000\004\011\130\001\002\000\016\005\024" +
    "\013\020\021\014\022\015\024\016\054\022\001\002\000" +
    "\014\006\uffe9\012\uffe9\023\uffe9\033\uffe9\036\uffe9\001\002" +
    "\000\006\034\ufff8\035\ufff8\001\002\000\020\003\134\005" +
    "\ufffe\013\ufffe\021\ufffe\022\ufffe\024\ufffe\054\132\001\002" +
    "\000\010\033\164\034\ufff6\035\ufff6\001\002\000\020\003" +
    "\ufffc\005\ufffc\013\ufffc\021\ufffc\022\ufffc\024\ufffc\054\ufffc" +
    "\001\002\000\006\034\140\035\137\001\002\000\004\054" +
    "\163\001\002\000\014\007\147\053\141\055\142\056\145" +
    "\061\146\001\002\000\004\033\uffef\001\002\000\004\033" +
    "\ufff1\001\002\000\004\033\162\001\002\000\004\033\ufff5" +
    "\001\002\000\004\033\ufff0\001\002\000\004\033\uffee\001" +
    "\002\000\004\030\151\001\002\000\004\033\ufff4\001\002" +
    "\000\022\014\047\026\042\054\022\062\034\063\037\064" +
    "\044\065\035\066\041\001\002\000\004\036\157\001\002" +
    "\000\004\031\154\001\002\000\004\015\155\001\002\000" +
    "\012\053\141\055\142\056\145\061\146\001\002\000\004" +
    "\033\ufff3\001\002\000\004\036\160\001\002\000\022\014" +
    "\047\026\042\054\022\062\034\063\037\064\044\065\035" +
    "\066\041\001\002\000\004\031\ufff2\001\002\000\020\003" +
    "\ufffa\005\ufffa\013\ufffa\021\ufffa\022\ufffa\024\ufffa\054\ufffa" +
    "\001\002\000\006\034\ufff7\035\ufff7\001\002\000\020\003" +
    "\ufff9\005\ufff9\013\ufff9\021\ufff9\022\ufff9\024\ufff9\054\ufff9" +
    "\001\002\000\020\003\ufffb\005\ufffb\013\ufffb\021\ufffb\022" +
    "\ufffb\024\ufffb\054\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\010\005\132\006\134\007\135\001\001\000" +
    "\010\014\020\015\022\016\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\037\020\126\021\032\022" +
    "\035\023\045\001\001\000\006\015\123\016\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\037\020" +
    "\105\021\032\022\035\023\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\024\015" +
    "\022\016\016\001\001\000\002\001\001\000\006\015\027" +
    "\016\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\037\020\044\021\032\022\035\023\045\001\001" +
    "\000\010\016\037\022\104\023\045\001\001\000\004\017" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\037\020\060\021\032\022\035\023\045" +
    "\001\001\000\010\016\037\022\057\023\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\051\001\001" +
    "\000\006\016\037\023\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\037\022\055\023\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\037\022\103\023" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\037\022\102\023\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\037\021\100\022\035\023\045\001\001\000\010\016\037" +
    "\022\077\023\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\107\016" +
    "\016\001\001\000\002\001\001\000\006\015\111\016\016" +
    "\001\001\000\002\001\001\000\014\016\037\020\113\021" +
    "\032\022\035\023\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\037\020\116\021\032\022\035\023" +
    "\045\001\001\000\002\001\001\000\014\016\037\020\120" +
    "\021\032\022\035\023\045\001\001\000\002\001\001\000" +
    "\006\015\122\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\037\020\125\021\032\022\035\023" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\130\016\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\164\007\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\142\011\147\013\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\152\016\037\023\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\037\023\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public SymTable symtable = new SymTable();

	public ArrayList<IntermReg> intermcode = new ArrayList<IntermReg>();

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token.value, cur_token);
	}

	public static void main(String[] args){
		try {
			Parser asin = new Parser(
				new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= FALSE 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= TRUE 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= CHAR_CONS 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "char");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= STRING_LITERAL 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "string");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= INT_CONST 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "integer");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NOT factor 
            {
              Factor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(f);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LEFT_PAR expression RIGHT_PAR 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Factor r = new Factor(e);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= variable 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(v);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termOps ::= MOD 
            {
              String RESULT =null;
		
			RESULT = "mod";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termOps ::= DIV 
            {
              String RESULT =null;
		
			RESULT = "div";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termOps ::= DIVIDE 
            {
              String RESULT =null;
		
			RESULT = "/";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termOps ::= PRODUCT 
            {
              String RESULT =null;
		
			RESULT = "*";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor termOps term 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f,to,t);
			if (t.type == f.type) {
				r.type = t.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+t.type+"=/="+ f.type+")");
				if (fleft >= 0) {
					m.append(" at line "+(fleft+1));
				if (fright >= 0)
					m.append(", column "+(fright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f);
			r.type = f.type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simpleExpression ::= simpleExpression OR term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "OR", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simpleExpression ::= simpleExpression MINUS term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "-", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simpleExpression ::= simpleExpression PLUS term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "+", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simpleExpression ::= term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simpleExpression ::= MINUS term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simpleExpression ::= PLUS term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= simpleExpression operational simpleExpression 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se1 = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleExpression se2 = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se1, se2, o);
			if (se1.type != se2.type) {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se1.type+"=/="+ se2.type+")");
				if (se1left >= 0) {
					m.append(" at line "+(se1left+1));
				if (se1right >= 0)
					m.append(", column "+(se1right+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= simpleExpression 
            {
              Expression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operational ::= 
            {
              String RESULT =null;
		
			RESULT = null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operational ::= IN 
            {
              String RESULT =null;
		
			RESULT = "IN";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operational ::= NOT_EQUAL 
            {
              String RESULT =null;
		
			RESULT = "<>";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operational ::= EQUALS EQUALS 
            {
              String RESULT =null;
		
			RESULT = "==";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operational ::= LESS_EQUAL 
            {
              String RESULT =null;
		
			RESULT = ">=";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operational ::= GREATER_EQUALS 
            {
              String RESULT =null;
		
			RESULT = ">=";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operational ::= LESS_THAN 
            {
              String RESULT =null;
		
			RESULT = "<";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operational ::= GREATER_THAN 
            {
              String RESULT =null;
		
			RESULT = ">";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operational ::= DIVIDE 
            {
              String RESULT =null;
		
			RESULT = "/";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operational ::= PRODUCT 
            {
              String RESULT =null;
		
			RESULT = "*";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Variable r = new Variable(id);
			String var_type = parser.symtable.lookup((String) id);
			if (var_type == null) {
				StringBuilder m = new StringBuilder("Error: Variable '"+ (String) id +"' was not defined.");
				if (idleft >= 0) {
					m.append(" at line "+(idleft+1));
				if (idright >= 0)
					m.append(", column "+(idright+1));
				}
				System.err.println(m);
			}
			r.type = var_type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable ::= ID LEFT_BRACKET expression RIGHT_BRACKET 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Variable r = new Variable(id, e);
			String var_type = parser.symtable.lookup((String) id);
			if (var_type == null) {
				StringBuilder m = new StringBuilder("Error: Variable '"+ (String) id +"' was not defined.");
				if (idleft >= 0) {
					m.append(" at line "+(idleft+1));
				if (idright >= 0)
					m.append(", column "+(idright+1));
				}
				System.err.println(m);
			}
			r.type = var_type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= BEGIN statements END 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			BEStatement r = new BEStatement(s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= variable ASIGN expression 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AssignmentStatement r = new AssignmentStatement(v, e);
			if (v.type != e.type) {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+v.type+"=/="+ e.type+")");
				if (vleft >= 0) {
					m.append(" at line "+(vleft+1));
				if (vright >= 0)
					m.append(", column "+(vright+1));
				}
				System.err.println(m);
			} else {
				r.type = v.type;
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= FOR ID ASIGN expression TO expression DO statement 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ForStatement r = new ForStatement(id, e1, e2, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= REPEAT statement UNTIL expression 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RepeatStatement r = new RepeatStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WhileStatement r = new WhileStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s1, s2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= statements SEMICOLON statement 
            {
              Statements RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statements r = new Statements(s, ss);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= statement 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statements r = new Statements(s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simpleType ::= BOOLEAN 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simpleType ::= INTEGER 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("integer");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simpleType ::= CHAR 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("char");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpleType ::= STRING 
            {
              SimpleType RESULT =null;
		
			SimpleType r = new SimpleType("string");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // indexRange ::= factor DOT DOT factor 
            {
              IndexRange RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Factor start = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor end = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IndexRange r = new IndexRange(start, end);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexRange",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arrayType ::= ARRAY LEFT_BRACKET indexRange RIGHT_BRACKET OF simpleType 
            {
              ArrayType RESULT =null;
		int irleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IndexRange ir = (IndexRange)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayType r = new ArrayType(ir.start, ir.end, st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= arrayType 
            {
              Type RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(at);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifierList ::= error 
            {
              IdentifierList RESULT =null;
		
			System.err.println("Error at declaration list: Posible missing , in the middle of a declaration list.");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			il.add_id(id);
			RESULT = il;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IdentifierList r = new IdentifierList();
			r.add_id(id);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variableDeclaration ::= error SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		
			System.err.println("Error at declaration line: Posible missing ; at the end of a declaration line.");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variableDeclaration ::= identifierList COLON type SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			VariableDeclaration r = new VariableDeclaration(il, t);
			for (int i = 0; i < il.ids.size(); i++) {
				parser.symtable.enter(il.ids.get(i), t.getType().toString());
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variableDeclarationList ::= variableDeclarationList variableDeclaration 
            {
              VariableDeclarationList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			vdl.add_declaration(vd);
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variableDeclarationList ::= variableDeclaration 
            {
              VariableDeclarationList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclarationList r = new VariableDeclarationList(vd);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variableDeclarationPart ::= 
            {
              Object RESULT =null;
		
			VariableDeclarationList r = new VariableDeclarationList();
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variableDeclarationPart ::= VAR variableDeclarationList 
            {
              Object RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= variableDeclarationPart statements 
            {
              Block RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statements sp = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclarationList var_list = (VariableDeclarationList) vdl;
			Block r = new Block(var_list, sp);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID SEMICOLON block DOT 
            {
              PascalProgram RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			PascalProgram r = new PascalProgram((String) id, block);
			RESULT = r;
			parser.root = RESULT;
			System.out.println(parser.symtable.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

