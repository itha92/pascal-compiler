
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 11 12:05:05 CST 2017
//----------------------------------------------------

package mini.pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import mini.pascal.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 11 12:05:05 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\007\000\002\025" +
    "\004\000\002\025\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\005\000\002\026\013\000" +
    "\002\027\011\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\006\000\002\004\004\000\002\005" +
    "\004\000\002\005\005\000\002\006\005\000\002\006\004" +
    "\000\002\007\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\010\000\002" +
    "\012\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\003\000\002\014\005" +
    "\000\002\015\006\000\002\015\010\000\002\015\006\000" +
    "\002\015\006\000\002\015\012\000\002\015\005\000\002" +
    "\015\005\000\002\015\006\000\002\016\006\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\002\000\002\032\005\000\002\032\003\000\002\020" +
    "\003\000\002\020\005\000\002\021\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\023\006\000\002\023\003\000\002\023\005" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\005\001\002\000\004\002\244\001" +
    "\002\000\004\054\006\001\002\000\004\033\007\001\002" +
    "\000\012\005\020\020\015\066\014\067\016\001\002\000" +
    "\004\036\243\001\002\000\016\005\ufffd\020\ufffd\033\ufffd" +
    "\036\ufffd\066\ufffd\067\ufffd\001\002\000\016\005\020\020" +
    "\015\033\ufffe\036\ufffe\066\014\067\016\001\002\000\004" +
    "\033\241\001\002\000\004\054\233\001\002\000\006\003" +
    "\222\054\156\001\002\000\004\054\153\001\002\000\004" +
    "\033\152\001\002\000\016\005\031\013\025\021\022\022" +
    "\021\024\023\054\027\001\002\000\016\005\031\013\025" +
    "\021\022\022\021\024\023\054\027\001\002\000\026\014" +
    "\057\026\050\040\051\041\040\054\055\062\042\063\046" +
    "\064\053\065\043\070\047\001\002\000\004\054\135\001" +
    "\002\000\004\037\133\001\002\000\026\014\057\026\050" +
    "\040\051\041\040\054\055\062\042\063\046\064\053\065" +
    "\043\070\047\001\002\000\006\006\125\033\033\001\002" +
    "\000\010\026\036\030\037\037\uffd8\001\002\000\006\006" +
    "\uffe3\033\uffe3\001\002\000\016\005\031\013\025\021\022" +
    "\022\021\024\023\054\027\001\002\000\006\006\034\033" +
    "\033\001\002\000\016\005\031\013\025\021\022\022\021" +
    "\024\023\054\027\001\002\000\012\006\uffdb\012\uffdb\023" +
    "\uffdb\033\uffdb\001\002\000\006\006\uffe2\033\uffe2\001\002" +
    "\000\026\014\057\026\050\040\051\041\040\054\055\062" +
    "\042\063\046\064\053\065\043\070\047\001\002\000\026" +
    "\014\057\026\050\040\051\041\040\054\055\062\042\063" +
    "\046\064\053\065\043\070\047\001\002\000\022\014\057" +
    "\026\050\054\055\062\042\063\046\064\053\065\043\070" +
    "\047\001\002\000\076\006\uffcb\011\uffcb\012\uffcb\014\uffce" +
    "\016\114\017\uffcb\023\uffcb\025\uffcb\026\uffce\027\uffcb\031" +
    "\uffcb\032\102\033\uffcb\035\uffcb\040\104\041\100\042\101" +
    "\043\105\045\112\046\110\047\111\050\103\051\106\052" +
    "\107\054\uffce\062\uffce\063\uffce\064\uffce\065\uffce\070\uffce" +
    "\001\002\000\104\006\uffb9\010\uffb9\011\uffb9\012\uffb9\014" +
    "\uffb9\016\uffb9\017\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\054\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\070\uffb9\001\002\000\104\006\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\014\uffb7\016\uffb7\017\uffb7\023\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7" +
    "\036\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\001\002\000" +
    "\076\006\uffc7\011\uffc7\012\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\023\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\070\uffc7\001\002\000\104" +
    "\006\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\016\uffbc\017" +
    "\uffbc\023\uffbc\025\uffbc\026\075\027\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\054\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\070" +
    "\uffbc\001\002\000\104\006\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\016\uffb6\017\uffb6\023\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\070\uffb6\001\002\000\104\006\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\014\uffb8\016\uffb8\017\uffb8\023\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\001\002" +
    "\000\026\014\057\026\050\040\051\041\040\054\055\062" +
    "\042\063\046\064\053\065\043\070\047\001\002\000\022" +
    "\014\057\026\050\054\055\062\042\063\046\064\053\065" +
    "\043\070\047\001\002\000\006\031\070\035\067\001\002" +
    "\000\104\006\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\016" +
    "\uffb5\017\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\054\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\070\uffb5\001\002\000\010\027\uffcc\031\uffcc\035\uffcc" +
    "\001\002\000\106\006\uffd8\010\uffd8\011\uffd8\012\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\037\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\070\uffd8\001\002\000\102\006\uffc3" +
    "\010\064\011\uffc3\012\uffc3\014\uffc3\016\uffc3\017\uffc3\023" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\035\uffc3\040\uffc3\041\uffc3\042\065\043\063\044\061\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\070\uffc3\001\002\000" +
    "\022\014\057\026\050\054\055\062\042\063\046\064\053" +
    "\065\043\070\047\001\002\000\104\006\uffba\010\uffba\011" +
    "\uffba\012\uffba\014\uffba\016\uffba\017\uffba\023\uffba\025\uffba" +
    "\026\uffba\027\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\070\uffba\001\002\000\022" +
    "\014\uffbe\026\uffbe\054\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\070\uffbe\001\002\000\022\014\057\026\050\054\055" +
    "\062\042\063\046\064\053\065\043\070\047\001\002\000" +
    "\022\014\uffc1\026\uffc1\054\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\070\uffc1\001\002\000\022\014\uffbf\026\uffbf\054" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\070\uffbf\001\002" +
    "\000\022\014\uffc0\026\uffc0\054\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\070\uffc0\001\002\000\076\006\uffc2\011\uffc2" +
    "\012\uffc2\014\uffc2\016\uffc2\017\uffc2\023\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\070\uffc2\001\002\000\026\014\057\026\050\040" +
    "\051\041\040\054\055\062\042\063\046\064\053\065\043" +
    "\070\047\001\002\000\106\006\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\016\uffd9\017\uffd9\023\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\070\uffd9\001\002\000\010" +
    "\027\uffcd\031\uffcd\035\uffcd\001\002\000\076\006\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\023\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\054\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\070\uffc9\001\002\000\004\027\074\001\002" +
    "\000\104\006\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\016" +
    "\uffbb\017\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\054\uffbb\062\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\070\uffbb\001\002\000\026\014\057\026\050\040\051" +
    "\041\040\054\055\062\042\063\046\064\053\065\043\070" +
    "\047\001\002\000\006\027\077\035\067\001\002\000\104" +
    "\006\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\016\uffbd\017" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\054\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\070" +
    "\uffbd\001\002\000\022\014\057\026\050\054\055\062\042" +
    "\063\046\064\053\065\043\070\047\001\002\000\026\014" +
    "\uffd6\026\uffd6\040\uffd6\041\uffd6\054\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\070\uffd6\001\002\000\026\014\uffcf\026" +
    "\uffcf\040\uffcf\041\uffcf\054\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\070\uffcf\001\002\000\026\014\uffd4\026\uffd4\040" +
    "\uffd4\041\uffd4\054\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\070\uffd4\001\002\000\022\014\057\026\050\054\055\062" +
    "\042\063\046\064\053\065\043\070\047\001\002\000\026" +
    "\014\uffd7\026\uffd7\040\uffd7\041\uffd7\054\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\070\uffd7\001\002\000\026\014\uffd3" +
    "\026\uffd3\040\uffd3\041\uffd3\054\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\070\uffd3\001\002\000\026\014\uffd2\026\uffd2" +
    "\040\uffd2\041\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\070\uffd2\001\002\000\026\014\uffd0\026\uffd0\040\uffd0" +
    "\041\uffd0\054\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\070" +
    "\uffd0\001\002\000\026\014\uffd5\026\uffd5\040\uffd5\041\uffd5" +
    "\054\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\070\uffd5\001" +
    "\002\000\004\045\117\001\002\000\026\014\057\026\050" +
    "\040\051\041\040\054\055\062\042\063\046\064\053\065" +
    "\043\070\047\001\002\000\022\014\057\026\050\054\055" +
    "\062\042\063\046\064\053\065\043\070\047\001\002\000" +
    "\076\006\uffc4\011\uffc4\012\uffc4\014\uffc4\016\uffc4\017\uffc4" +
    "\023\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\070\uffc4\001\002\000\034" +
    "\006\uffca\011\uffca\012\uffca\016\114\017\uffca\023\uffca\025" +
    "\uffca\027\uffca\031\uffca\033\uffca\035\uffca\040\104\041\100" +
    "\001\002\000\026\014\uffd1\026\uffd1\040\uffd1\041\uffd1\054" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\070\uffd1\001\002" +
    "\000\076\006\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6\017" +
    "\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\070\uffc6\001\002\000" +
    "\076\006\uffc5\011\uffc5\012\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\023\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\070\uffc5\001\002\000\076" +
    "\006\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\023" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\035\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\070\uffc8\001\002\000\006\027" +
    "\124\035\067\001\002\000\012\006\uffda\012\uffda\023\uffda" +
    "\033\uffda\001\002\000\016\005\ufffa\020\ufffa\033\ufffa\036" +
    "\ufffa\066\ufffa\067\ufffa\001\002\000\004\017\127\001\002" +
    "\000\016\005\031\013\025\021\022\022\021\024\023\054" +
    "\027\001\002\000\012\006\uffe1\012\131\023\uffe1\033\uffe1" +
    "\001\002\000\016\005\031\013\025\021\022\022\021\024" +
    "\023\054\027\001\002\000\012\006\uffe0\012\uffe0\023\uffe0" +
    "\033\uffe0\001\002\000\026\014\057\026\050\040\051\041" +
    "\040\054\055\062\042\063\046\064\053\065\043\070\047" +
    "\001\002\000\012\006\uffdc\012\uffdc\023\uffdc\033\uffdc\001" +
    "\002\000\004\037\136\001\002\000\026\014\057\026\050" +
    "\040\051\041\040\054\055\062\042\063\046\064\053\065" +
    "\043\070\047\001\002\000\004\025\140\001\002\000\026" +
    "\014\057\026\050\040\051\041\040\054\055\062\042\063" +
    "\046\064\053\065\043\070\047\001\002\000\004\011\142" +
    "\001\002\000\016\005\031\013\025\021\022\022\021\024" +
    "\023\054\027\001\002\000\012\006\uffdd\012\uffdd\023\uffdd" +
    "\033\uffdd\001\002\000\004\011\145\001\002\000\016\005" +
    "\031\013\025\021\022\022\021\024\023\054\027\001\002" +
    "\000\012\006\uffdf\012\uffdf\023\uffdf\033\uffdf\001\002\000" +
    "\004\023\150\001\002\000\026\014\057\026\050\040\051" +
    "\041\040\054\055\062\042\063\046\064\053\065\043\070" +
    "\047\001\002\000\012\006\uffde\012\uffde\023\uffde\033\uffde" +
    "\001\002\000\016\005\ufffb\020\ufffb\033\ufffb\036\ufffb\066" +
    "\ufffb\067\ufffb\001\002\000\004\026\154\001\002\000\010" +
    "\003\157\020\155\054\156\001\002\000\006\003\157\054" +
    "\156\001\002\000\006\034\uffee\035\uffee\001\002\000\006" +
    "\034\uffec\035\uffec\001\002\000\006\027\ufff6\033\ufff6\001" +
    "\002\000\006\027\210\033\207\001\002\000\006\034\164" +
    "\035\163\001\002\000\004\054\206\001\002\000\014\007" +
    "\174\053\165\055\166\056\172\061\171\001\002\000\006" +
    "\027\uffe5\033\uffe5\001\002\000\006\027\uffe7\033\uffe7\001" +
    "\002\000\006\027\ufff5\033\ufff5\001\002\000\006\027\uffeb" +
    "\033\uffeb\001\002\000\006\027\uffe4\033\uffe4\001\002\000" +
    "\006\027\uffe6\033\uffe6\001\002\000\006\027\uffea\033\uffea" +
    "\001\002\000\004\030\175\001\002\000\022\014\057\026" +
    "\050\054\055\062\042\063\046\064\053\065\043\070\047" +
    "\001\002\000\004\031\203\001\002\000\004\036\200\001" +
    "\002\000\004\036\201\001\002\000\022\014\057\026\050" +
    "\054\055\062\042\063\046\064\053\065\043\070\047\001" +
    "\002\000\004\031\uffe8\001\002\000\004\015\204\001\002" +
    "\000\012\053\165\055\166\056\172\061\171\001\002\000" +
    "\006\027\uffe9\033\uffe9\001\002\000\006\034\uffed\035\uffed" +
    "\001\002\000\010\003\157\020\155\054\156\001\002\000" +
    "\004\034\211\001\002\000\014\007\174\053\165\055\166" +
    "\056\172\061\171\001\002\000\004\033\213\001\002\000" +
    "\012\005\020\020\015\066\014\067\016\001\002\000\004" +
    "\033\ufff9\001\002\000\006\027\ufff7\033\ufff7\001\002\000" +
    "\006\034\217\035\163\001\002\000\014\007\174\053\165" +
    "\055\166\056\172\061\171\001\002\000\006\027\ufff4\033" +
    "\ufff4\001\002\000\022\003\222\005\ufff3\020\ufff3\033\ufff3" +
    "\036\ufff3\054\156\066\ufff3\067\ufff3\001\002\000\010\033" +
    "\230\034\uffec\035\uffec\001\002\000\004\033\227\001\002" +
    "\000\006\034\225\035\163\001\002\000\014\007\174\053" +
    "\165\055\166\056\172\061\171\001\002\000\004\033\ufff0" +
    "\001\002\000\022\003\ufff2\005\ufff2\020\ufff2\033\ufff2\036" +
    "\ufff2\054\ufff2\066\ufff2\067\ufff2\001\002\000\004\033\uffef" +
    "\001\002\000\004\033\232\001\002\000\022\003\ufff1\005" +
    "\ufff1\020\ufff1\033\ufff1\036\ufff1\054\ufff1\066\ufff1\067\ufff1" +
    "\001\002\000\004\026\234\001\002\000\010\003\157\020" +
    "\155\054\156\001\002\000\006\027\236\033\207\001\002" +
    "\000\004\033\237\001\002\000\012\005\020\020\015\066" +
    "\014\067\016\001\002\000\004\033\ufff8\001\002\000\016" +
    "\005\ufffc\020\ufffc\033\ufffc\036\ufffc\066\ufffc\067\ufffc\001" +
    "\002\000\006\033\uffff\036\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\011\004\010" +
    "\025\007\026\012\027\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\011\004\010\025\241\026\012" +
    "\027\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\220\006\222\007\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\025\015\027\016\023\001" +
    "\001\000\006\015\146\016\023\001\001\000\014\016\044" +
    "\020\143\021\040\022\043\023\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\044\020\125\021\040" +
    "\022\043\023\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\031\015\027\016\023" +
    "\001\001\000\002\001\001\000\006\015\034\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\044" +
    "\020\053\021\040\022\043\023\055\032\122\001\001\000" +
    "\016\016\044\020\053\021\040\022\043\023\055\032\051" +
    "\001\001\000\010\016\044\022\121\023\055\001\001\000" +
    "\004\017\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\044\020\072\021\040\022\043" +
    "\023\055\001\001\000\010\016\044\022\071\023\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\061\001\001\000\006\016" +
    "\044\023\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\044\022\065\023\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\044\020\070\021\040\022\043\023\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\044\020" +
    "\053\021\040\022\043\023\055\032\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\044\022\120\023" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\044\022\117\023\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\044\021\115\022\043\023\055\001\001\000\010\016\044" +
    "\022\114\023\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\127\016\023" +
    "\001\001\000\002\001\001\000\006\015\131\016\023\001" +
    "\001\000\002\001\001\000\014\016\044\020\133\021\040" +
    "\022\043\023\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\044\020\136\021\040\022\043\023\055" +
    "\001\001\000\002\001\001\000\014\016\044\020\140\021" +
    "\040\022\043\023\055\001\001\000\002\001\001\000\006" +
    "\015\142\016\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\145\016\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\044\020\150\021\040\022" +
    "\043\023\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\161\030\160\031\157\001" +
    "\001\000\004\007\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\166\011\172\013\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\175\016" +
    "\044\023\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\044\023\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\161\031" +
    "\214\001\001\000\002\001\001\000\010\010\211\011\172" +
    "\013\167\001\001\000\002\001\001\000\014\003\011\004" +
    "\010\025\213\026\012\027\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\217\011" +
    "\172\013\167\001\001\000\002\001\001\000\006\006\230" +
    "\007\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\225\011\172\013\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\161\030\234\031\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\011\004\010\025\237\026\012" +
    "\027\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public SymTable symtable = new SymTable();

	public ArrayList<IntermReg> intermcode = new ArrayList<IntermReg>();

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token.value, cur_token);
	}

	public static void main(String[] args){
		try {
			Parser asin = new Parser(
				new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= FALSE 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= TRUE 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= CHAR_CONS 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i.toString(), "char");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= STRING_LITERAL 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "string");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= INT_CONST 
            {
              Factor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String) i, "integer");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= NOT factor 
            {
              Factor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(f);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LEFT_PAR expression RIGHT_PAR 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Factor r = new Factor(e);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= variable 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(v);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= variable LEFT_PAR expressions RIGHT_PAR 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Factor r = new Factor(v, e);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termOps ::= MOD 
            {
              String RESULT =null;
		
			RESULT = "mod";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termOps ::= DIV 
            {
              String RESULT =null;
		
			RESULT = "div";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termOps ::= DIVIDE 
            {
              String RESULT =null;
		
			RESULT = "/";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termOps ::= PRODUCT 
            {
              String RESULT =null;
		
			RESULT = "*";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termOps",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= factor termOps term 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f,to,t);
			if (t.type == f.type) {
				r.type = t.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+t.type+"=/="+ f.type+")");
				if (fleft >= 0) {
					m.append(" at line "+(fleft+1));
				if (fright >= 0)
					m.append(", column "+(fright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(f);
			r.type = f.type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simpleExpression ::= simpleExpression OR term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "OR", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simpleExpression ::= simpleExpression MINUS term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "-", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simpleExpression ::= simpleExpression PLUS term 
            {
              SimpleExpression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(se, "+", t);
			if (se.type == t.type) {
				r.type = se.type;
			} else {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se.type+"=/="+ t.type+")");
				if (seleft >= 0) {
					m.append(" at line "+(seleft+1));
				if (seright >= 0)
					m.append(", column "+(seright+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simpleExpression ::= term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simpleExpression ::= MINUS term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simpleExpression ::= PLUS term 
            {
              SimpleExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression("+", t);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= simpleExpression operational simpleExpression 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleExpression se1 = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleExpression se2 = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se1, se2, o);
			if (se1.type != se2.type) {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+se1.type+"=/="+ se2.type+")");
				if (se1left >= 0) {
					m.append(" at line "+(se1left+1));
				if (se1right >= 0)
					m.append(", column "+(se1right+1));
				}
				System.err.println(m);
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= simpleExpression 
            {
              Expression RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleExpression se = (SimpleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressions ::= expression 
            {
              Expressions RESULT =null;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressions ::= expressions COMMA expression 
            {
              Expressions RESULT =null;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operational ::= 
            {
              String RESULT =null;
		
			RESULT = null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operational ::= IN 
            {
              String RESULT =null;
		
			RESULT = "IN";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operational ::= NOT_EQUAL 
            {
              String RESULT =null;
		
			RESULT = "<>";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operational ::= EQUALS EQUALS 
            {
              String RESULT =null;
		
			RESULT = "==";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operational ::= LESS_EQUAL 
            {
              String RESULT =null;
		
			RESULT = ">=";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operational ::= GREATER_EQUALS 
            {
              String RESULT =null;
		
			RESULT = ">=";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operational ::= LESS_THAN 
            {
              String RESULT =null;
		
			RESULT = "<";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operational ::= GREATER_THAN 
            {
              String RESULT =null;
		
			RESULT = ">";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operational ::= DIVIDE 
            {
              String RESULT =null;
		
			RESULT = "/";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operational ::= PRODUCT 
            {
              String RESULT =null;
		
			RESULT = "*";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operational",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Variable r = new Variable(id);
			String var_type = parser.symtable.lookup((String) id);
			if (var_type == null) {
				StringBuilder m = new StringBuilder("Error: Variable '"+ (String) id +"' was not defined.");
				if (idleft >= 0) {
					m.append(" at line "+(idleft+1));
				if (idright >= 0)
					m.append(", column "+(idright+1));
				}
				System.err.println(m);
			}
			r.type = var_type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= ID LEFT_BRACKET expressions RIGHT_BRACKET 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Variable r = new Variable(id, e);
			String var_type = parser.symtable.lookup((String) id);
			if (var_type == null) {
				StringBuilder m = new StringBuilder("Error: Variable '"+ (String) id +"' was not defined.");
				if (idleft >= 0) {
					m.append(" at line "+(idleft+1));
				if (idright >= 0)
					m.append(", column "+(idright+1));
				}
				System.err.println(m);
			}
			r.type = var_type;
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= ID LEFT_PAR expressions RIGHT_PAR 
            {
              Statement RESULT =null;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= BEGIN statements END 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			BEStatement r = new BEStatement(s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= variable ASIGN expression 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AssignmentStatement r = new AssignmentStatement(v, e);
			if (v.type != e.type) {
				StringBuilder m = new StringBuilder("Error: Operating differents types. ("+v.type+"=/="+ e.type+")");
				if (vleft >= 0) {
					m.append(" at line "+(vleft+1));
				if (vright >= 0)
					m.append(", column "+(vright+1));
				}
				System.err.println(m);
			} else {
				r.type = v.type;
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= FOR ID ASIGN expression TO expression DO statement 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ForStatement r = new ForStatement(id, e1, e2, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= REPEAT statement UNTIL expression 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RepeatStatement r = new RepeatStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WhileStatement r = new WhileStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s1, s2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(e, s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= statements SEMICOLON statement 
            {
              Statements RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statements r = new Statements(s, ss);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements ::= statement 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statements r = new Statements(s);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simpleType ::= BOOLEAN 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("boolean");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simpleType ::= INTEGER 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("integer");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simpleType ::= CHAR 
            {
              SimpleType RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleType r = new SimpleType("char");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simpleType ::= STRING 
            {
              SimpleType RESULT =null;
		
			SimpleType r = new SimpleType("string");
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // indexRange ::= factor DOT DOT factor 
            {
              IndexRange RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Factor start = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Factor end = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IndexRange r = new IndexRange(start, end);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexRange",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arrayType ::= ARRAY LEFT_BRACKET indexRange RIGHT_BRACKET OF simpleType 
            {
              ArrayType RESULT =null;
		int irleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IndexRange ir = (IndexRange)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayType r = new ArrayType(ir.start, ir.end, st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= arrayType 
            {
              Type RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(at);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type r = new Type(st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // identifierList ::= error 
            {
              IdentifierList RESULT =null;
		
			System.err.println("Error at declaration list: Posible missing , in the middle of a declaration list.");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			il.add_id(id);
			RESULT = il;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IdentifierList r = new IdentifierList();
			r.add_id(id);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variableDeclaration ::= error SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		
			System.err.println("Error at declaration line: Posible missing ; at the end of a declaration line.");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variableDeclaration ::= identifierList COLON type 
            {
              VariableDeclaration RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclaration r = new VariableDeclaration(il, t);
			for (int i = 0; i < il.ids.size(); i++) {
				parser.symtable.enter(il.ids.get(i), t.getType().toString());
			}
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variableDeclarationList ::= variableDeclarationList variableDeclaration SEMICOLON 
            {
              VariableDeclarationList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			vdl.add_declaration(vd);
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variableDeclarationList ::= variableDeclaration SEMICOLON 
            {
              VariableDeclarationList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			VariableDeclarationList r = new VariableDeclarationList(vd);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variableDeclarationPart ::= VAR variableDeclarationList 
            {
              Object RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDeclarationList vdl = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param ::= VAR identifierList COLON type 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList i = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param ::= identifierList COLON type 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierList i = (IdentifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param 
            {
              Params RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // params ::= params SEMICOLON param 
            {
              Params RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Params ps = (Params)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedureDeclaration ::= PROCEDURE ID LEFT_PAR params RIGHT_PAR SEMICOLON blocks 
            {
              ProcedureDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Params p = (Params)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ProcedureDeclaration r = new ProcedureDeclaration((String) id, p, b);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDeclaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functionDeclaration ::= FUNCTION ID LEFT_PAR params RIGHT_PAR COLON type SEMICOLON blocks 
            {
              FunctionDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Params p = (Params)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			FunctionDeclaration r = new FunctionDeclaration((String) id, p, t, b);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= BEGIN statements END 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = (Statements) s;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= procedureDeclaration SEMICOLON 
            {
              Block RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = (ProcedureDeclaration) pd;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= functionDeclaration SEMICOLON 
            {
              Block RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = (FunctionDeclaration) fd;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= variableDeclarationPart 
            {
              Block RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = (VariableDeclarationList) vdl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blocks ::= block 
            {
              Blocks RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Blocks r = new Blocks(b);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocks",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blocks ::= block blocks 
            {
              Blocks RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Blocks bs = (Blocks)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Blocks r = new Blocks(bs, b);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blocks",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID SEMICOLON blocks DOT 
            {
              PascalProgram RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blocksleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blocksright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Blocks blocks = (Blocks)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			PascalProgram r = new PascalProgram((String) id, blocks);
			RESULT = r;
			parser.root = RESULT;
			System.out.println(parser.symtable.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

