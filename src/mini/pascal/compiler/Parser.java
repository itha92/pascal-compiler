
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 23 22:03:23 CST 2017
//----------------------------------------------------

package mini.pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import mini.pascal.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 23 22:03:23 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\004\000\002\006\006\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\011\010\000\002\012\006\000\002\013\003\000\002\014" +
    "\003\000\002\015\005\000\002\016\003\000\002\016\005" +
    "\000\002\017\003\000\002\017\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\025" +
    "\006\000\002\026\003\000\002\026\005\000\002\027\003" +
    "\000\002\030\006\000\002\031\003\000\002\031\005\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\006\000\002\034\010\000\002\035" +
    "\006\000\002\036\003\000\002\036\005\000\002\037\003" +
    "\000\002\037\004\000\002\040\004\000\002\041\003\000" +
    "\002\041\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\006\000\002\051\003\000" +
    "\002\052\003\000\002\053\003\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\004\005\001\002\000\004\002\127\001" +
    "\002\000\004\053\006\001\002\000\004\031\007\001\002" +
    "\000\006\005\uffb5\022\010\001\002\000\004\053\100\001" +
    "\002\000\004\005\ufffd\001\002\000\004\005\016\001\002" +
    "\000\004\034\014\001\002\000\004\002\000\001\002\000" +
    "\004\034\uffff\001\002\000\012\005\016\014\023\023\020" +
    "\053\024\001\002\000\004\034\ufff2\001\002\000\020\022" +
    "\uffb5\025\uffb5\036\032\037\034\052\uffb5\053\uffb5\067\uffb5" +
    "\001\002\000\010\006\uffdc\013\uffdc\031\uffdc\001\002\000" +
    "\006\006\073\031\072\001\002\000\020\022\uffb5\025\uffb5" +
    "\036\032\037\034\052\uffb5\053\uffb5\067\uffb5\001\002\000" +
    "\010\006\uffee\013\uffee\031\uffee\001\002\000\006\006\ufff0" +
    "\031\ufff0\001\002\000\010\006\uffdb\013\uffdb\031\uffdb\001" +
    "\002\000\010\006\uffdd\013\uffdd\031\uffdd\001\002\000\010" +
    "\006\uffed\013\uffed\031\uffed\001\002\000\014\022\053\025" +
    "\055\052\054\053\056\067\062\001\002\000\014\022\uffc4" +
    "\025\uffc4\052\uffc4\053\uffc4\067\uffc4\001\002\000\024\012" +
    "\uffd7\021\uffd7\026\uffd7\044\045\045\043\046\046\047\044" +
    "\050\047\051\050\001\002\000\014\022\uffc3\025\uffc3\052" +
    "\uffc3\053\uffc3\067\uffc3\001\002\000\014\022\uffc2\025\uffc2" +
    "\052\uffc2\053\uffc2\067\uffc2\001\002\000\004\021\037\001" +
    "\002\000\012\005\016\014\023\023\020\053\024\001\002" +
    "\000\010\006\uffda\013\041\031\uffda\001\002\000\012\005" +
    "\016\014\023\023\020\053\024\001\002\000\010\006\uffd9" +
    "\013\uffd9\031\uffd9\001\002\000\020\022\uffc7\025\uffc7\036" +
    "\uffc7\037\uffc7\052\uffc7\053\uffc7\067\uffc7\001\002\000\020" +
    "\022\uffca\025\uffca\036\uffca\037\uffca\052\uffca\053\uffca\067" +
    "\uffca\001\002\000\020\022\uffc8\025\uffc8\036\uffc8\037\uffc8" +
    "\052\uffc8\053\uffc8\067\uffc8\001\002\000\020\022\uffc5\025" +
    "\uffc5\036\uffc5\037\uffc5\052\uffc5\053\uffc5\067\uffc5\001\002" +
    "\000\020\022\uffc6\025\uffc6\036\uffc6\037\uffc6\052\uffc6\053" +
    "\uffc6\067\uffc6\001\002\000\020\022\uffc9\025\uffc9\036\uffc9" +
    "\037\uffc9\052\uffc9\053\uffc9\067\uffc9\001\002\000\020\022" +
    "\uffb5\025\uffb5\036\032\037\034\052\uffb5\053\uffb5\067\uffb5" +
    "\001\002\000\010\012\uffd6\021\uffd6\026\uffd6\001\002\000" +
    "\032\007\uffd0\012\uffd0\021\uffd0\026\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001" +
    "\002\000\032\007\uffcd\012\uffcd\021\uffcd\026\uffcd\040\uffcd" +
    "\041\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\001\002\000\020\022\uffb5\025\uffb5\036\032\037\034" +
    "\052\uffb5\053\uffb5\067\uffb5\001\002\000\032\007\uffcb\012" +
    "\uffcb\021\uffcb\026\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\032\007" +
    "\uffd2\012\uffd2\021\uffd2\026\uffd2\040\uffd2\041\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002\000" +
    "\032\007\064\012\uffd3\021\uffd3\026\uffd3\040\066\041\065" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\001" +
    "\002\000\032\007\uffcf\012\uffcf\021\uffcf\026\uffcf\040\uffcf" +
    "\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\032\007\uffcc\012\uffcc\021\uffcc\026\uffcc" +
    "\040\uffcc\041\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\014\022\053\025\055\052\054" +
    "\053\056\067\062\001\002\000\014\022\uffbc\025\uffbc\052" +
    "\uffbc\053\uffbc\067\uffbc\001\002\000\014\022\uffbe\025\uffbe" +
    "\052\uffbe\053\uffbe\067\uffbe\001\002\000\014\022\uffbd\025" +
    "\uffbd\052\uffbd\053\uffbd\067\uffbd\001\002\000\032\007\uffd1" +
    "\012\uffd1\021\uffd1\026\uffd1\040\uffd1\041\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000\004" +
    "\026\071\001\002\000\032\007\uffce\012\uffce\021\uffce\026" +
    "\uffce\040\uffce\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\001\002\000\012\005\016\014\023\023" +
    "\020\053\024\001\002\000\012\006\ufff1\013\ufff1\031\ufff1" +
    "\034\ufff1\001\002\000\006\006\uffef\031\uffef\001\002\000" +
    "\004\012\076\001\002\000\012\005\016\014\023\023\020" +
    "\053\024\001\002\000\010\006\uffd8\013\uffd8\031\uffd8\001" +
    "\002\000\006\032\ufff9\033\ufff9\001\002\000\006\005\ufffe" +
    "\053\100\001\002\000\006\005\ufffc\053\ufffc\001\002\000" +
    "\006\032\105\033\104\001\002\000\004\053\125\001\002" +
    "\000\006\010\112\053\106\001\002\000\004\031\ufff3\001" +
    "\002\000\004\031\124\001\002\000\004\031\ufff7\001\002" +
    "\000\004\031\ufff6\001\002\000\004\027\113\001\002\000" +
    "\004\052\114\001\002\000\004\034\121\001\002\000\004" +
    "\030\116\001\002\000\004\016\117\001\002\000\004\053" +
    "\106\001\002\000\004\031\ufff5\001\002\000\004\034\122" +
    "\001\002\000\004\052\123\001\002\000\004\030\ufff4\001" +
    "\002\000\006\005\ufffa\053\ufffa\001\002\000\006\032\ufff8" +
    "\033\ufff8\001\002\000\006\005\ufffb\053\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\004\011" +
    "\054\010\001\001\000\010\005\100\006\101\007\102\001" +
    "\001\000\002\001\001\000\006\014\014\015\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\026\016\021\017\024\033\027\034\020\035\025" +
    "\001\001\000\002\001\001\000\012\036\074\040\032\044" +
    "\030\054\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\035\040\032\044\030\054\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\060\041\057\042" +
    "\056\001\001\000\002\001\001\000\004\043\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\026\017\037\033\027\034\020\035\025\001\001" +
    "\000\002\001\001\000\014\015\026\017\041\033\027\034" +
    "\020\035\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\051\044\030" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\036\067\040\032\044\030\054\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\060\042\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\026\017\073\033\027\034" +
    "\020\035\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\026\017\076\033\027\034" +
    "\020\035\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\125\007\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\106\011\110" +
    "\013\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token.value, cur_token);
	}

	public static void main(String[] args){
		try {
			Parser asin = new Parser(
				new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variableIdentifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		VariableIdentifier r = new VariableIdentifier(id);
		RESULT = r;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableIdentifier",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // entireVariable ::= ID 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		EntireVariable r = new EntireVariable(vi);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entireVariable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arrayVariable ::= entireVariable 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayVariable r = new ArrayVariable(ev);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayVariable",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // indexedVariable ::= arrayVariable LEFT_BRACKET expression RIGHT_BRACKET 
            {
              Object RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IndexedVariable r = new IndexedVariable(av, (String)lb, ex, (String)rb);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexedVariable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable ::= indexedVariable 
            {
              Object RESULT =null;
		int ivleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Variable r = new Variable(iv);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable ::= ID 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Variable r = new Variable(ev);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multiplyingOperator ::= AND 
            {
              Object RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			MultiplyingOperator r = new MultiplyingOperator((String)an);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // multiplyingOperator ::= DIVIDE 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			MultiplyingOperator r = new MultiplyingOperator((String)dd);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiplyingOperator ::= PRODUCT 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			MultiplyingOperator r = new MultiplyingOperator((String)pd);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // addingOperator ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AddingOperator r = new AddingOperator((String)or);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addingOperator",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // addingOperator ::= MINUS 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AddingOperator r = new AddingOperator((String)mn);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addingOperator",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // addingOperator ::= PLUS 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AddingOperator r = new AddingOperator((String)pl);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addingOperator",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sign ::= empty 
            {
              Object RESULT =null;
		int emptyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emptyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object empty = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sign ::= MINUS 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Sign r = new Sign((String)mn);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sign ::= PLUS 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Sign r = new Sign((String)pl);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relationalOperator ::= GREATER_THAN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relationalOperator ::= GREATER_EQUALS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relationalOperator ::= NOT_EQUAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relationalOperator ::= EQUALS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relationalOperator ::= LESS_EQUAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relationalOperator ::= LESS_THAN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RelationalOperator r = new RelationalOperator((String) s);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constant ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Constant r = new Constant((String)id);
		RESULT r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constant ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Constant r = new Constant((String)sl);
		RESULT r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constant ::= INTEGER 
            {
              Object RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Constant r = new Constant((String)it);
		RESULT r;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= LEFT_PAR expression RIGHT_PAR 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor((String)lp, ex, (String)rp);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(c);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Factor r = new Factor(v);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term multiplyingOperator factor 
            {
              Object RESULT =null;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(tm, mo, fc);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= factor 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Term r = new Term(fc);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simpleExpression ::= sign term 
            {
              Object RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpression r = new SimpleExpression(sn, tm);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simpleExpressionList ::= simpleExpressionList simpleExpression 
            {
              Object RESULT =null;
		int selleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int selright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpressionList r = new SimpleExpressionList(sel, se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpressionList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simpleExpressionList ::= simpleExpression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SimpleExpressionList r = new SimpleExpressionList(se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpressionList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= simpleExpression relationalOperator simpleExpression 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se1, ro, se2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= simpleExpression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Expression r = new Expression(se);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // whileStatement ::= WHILE expression DO statement 
            {
              Object RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WhileStatement r = new WhileStatement((String)wh, ex, (String)d, stm);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStatement ::= IF expression THEN statement ELSE statement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object stm1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				IfStatement r = new Statement((String)is, ex,(String)th , stm1, (String)el, stm2);
				RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStatement ::= IF expression THEN statement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement((String)is, ex,(String)th , stm);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structuredStatement ::= whileStatement 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WhileStatement r = new WhileStatement(ws);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structuredStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structuredStatement ::= ifStatement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IfStatement r = new IfStatement(is);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structuredStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // structuredStatement ::= compoundStatement 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		StructuredStatement r = new StructuredStatement(cs);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structuredStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // outputValue ::= expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			OutputValue r = new OutputValue(ex);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputValue",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // outputValueList ::= outputValueList COMMA outputValue 
            {
              Object RESULT =null;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ovl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ovleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ov = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			OutputValueList r = new OutputValueList(ovl, (String)c, ov);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputValueList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // outputValueList ::= outputValue 
            {
              Object RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ov = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputValueList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // writeStatement ::= WRITE_LN LEFT_BRACKET outputValueList RIGHT_PAR 
            {
              Object RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object wl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ovl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		WriteStatement r = new WriteStatement((String)wl, (String)lb, ovl, (String)rp);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeStatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inputVariable ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InputVariable r = new InputVariable(v);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputVariable",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inputVariableList ::= inputVariableList COMMA inputVariable 
            {
              Object RESULT =null;
		int ivlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ivlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ivl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ivleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InputVariableList r = new InputVariableList(ivl, (String)c, iv);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputVariableList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inputVariableList ::= inputVariable 
            {
              Object RESULT =null;
		int ivleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InputVariableList r = new InputVariableList(iv);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputVariableList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // readStatement ::= READ_LN LEFT_BRACKET inputVariableList RIGHT_PAR 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ivleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ReadStatement r = new ReadStatement((String)rl, (String)lb, iv, (String)rp);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedureStatement ::= ID 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ProcedureStatement r = new ProcedureStatement(pi);
		RESULT r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignmentStatement ::= expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			AssignmentStatement r = new AssignmentStatement(ex);
			RESULT r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignmentStatement ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		AssignmentStatement r = new AssignmentStatement(var);
		RESULT r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simpleStatement ::= writeStatement 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			WriteStatement r = new WriteStatement(ws);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simpleStatement ::= readStatement 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ReadStatement r = new ReadStatement(rs);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpleStatement ::= ID 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ProcedureStatement r = new ProcedureStatement(ps);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simpleStatement ::= assignmentStatement 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statement r = new Statement(as);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= structuredStatement 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statement r = new Statement(ss);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= ID 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Statement r = new Statement(ss);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statementList ::= statementList SEMICOLON statement 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			StatementList r = new StatementList(sl, (String)sc, stm);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statementList ::= statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			StatementList r = new StatementList(stm);
			RESULT = r;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compoundStatement ::= BEGIN statementList END 
            {
              Object RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		CompoundStatement r = new CompoundStatement((String)bg, sl, (String)end);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statementPart ::= compoundStatement 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		StatementPart r = new StatementPart(cs);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementPart",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simpleType ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SimpleType r = new SimpleType((String)id);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // indexRange ::= INTEGER DOT DOT INTEGER 
            {
              Object RESULT =null;
		int integer1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int integer1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object integer1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dt1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int integer2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integer2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object integer2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IndexRange r = new IndexRange((String)integer1, (String)dt1, (String)dt2, (String)integer2);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexRange",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arrayType ::= ARRAY LEFT_BRACKET indexRange RIGHT_BRACKET OF simpleType 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int irleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ir = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayType r = new ArrayType((String)arr, (String)lb, ir, (String)rb, (String)of, st);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= arrayType 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Type r = new Type(at);
		RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= simpleType 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Type r = new Type(st);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifierList ::= identifierList COMMA ID 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IdentifierList r = new IdentifierList((String) id, (String) c, il);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifierList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			IdentifierList r = new IdentifierList((String) id);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variableDeclaration ::= identifierList COLON type SEMICOLON 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclaration r = new VariableDeclaration( il, (String) c, t, (String)sc);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variableDeclarationList ::= variableDeclarationList variableDeclaration 
            {
              Object RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclaration r = new VariableDeclaration(vdl, il, (String) c, t, (String)sc);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variableDeclarationList ::= variableDeclaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			VariableDeclaration r = new VariableDeclaration(vd);
			RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variableDeclarationPart ::= empty 
            {
              Object RESULT =null;
		int emptyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emptyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object empty = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variableDeclarationPart ::= VAR variableDeclarationList 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		VariableDeclarationPart r = new VariableDeclarationPart((String)var, vdl);
		RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= variableDeclarationPart statementPart 
            {
              Object RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vdp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Block r = new Block(vdp, sp);
		RESULT = r;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID SEMICOLON block DOT 
            {
              Object RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object block = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		PascalProgram r = new PascalProgram((String) pro, (String) id, block, (String) sc, (String) dt);
		RESULT = r;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

